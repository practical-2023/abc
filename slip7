//SADP-Ceiling Fan
//Write a Java Program to implement undo command to test Ceiling fan.
interface Command {
public void execute();
}
class CeilingFan {
public void on(){
System.out.println("Ceiling Fan is on");
}
public void off()
{
System.out.println("Ceiling Fan is off");
}
}
class CeilingFanOnCommand implements Command {
CeilingFan c;
public CeilingFanOnCommand(CeilingFan l) {
this.c = l;
}
public void execute() {
c.on();
}
}
class CeilingFanOffCommand implements Command {
CeilingFan c;
public CeilingFanOffCommand(CeilingFan l) {
this.c = l;
}
public void execute() {
c.off();
}
}
class SimpleRemoteControl {
Command slot;
public SimpleRemoteControl() {}
public void setCommand(Command command) {
slot = command;
}
public void buttonWasPressed() {
slot.execute();
}
}
public class Main {
public static void main(String[] args) {
SimpleRemoteControl remote = new SimpleRemoteControl();
CeilingFan ceilingFan=new CeilingFan();
CeilingFanOnCommand ceilingFanOn =new CeilingFanOnCommand(ceilingFan);
remote.setCommand(ceilingFanOn);
remote.buttonWasPressed();
CeilingFanOffCommand ceilingFanOff =new CeilingFanOffCommand(ceilingFan);
remote.setCommand(ceilingFanOff);
remote.buttonWasPressed();
}
}


//ML-Naive Bayes

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Importing the dataset  
ds=pd.read_csv('Social_sitesAd.csv')
print(ds)
x = ds.iloc[:, [2, 3]].values  
print(x)
y = ds.iloc[:, 4].values  
print(y)
  
# Splitting the dataset into the Training set and Test set  
from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)  
  
# Feature Scaling  
from sklearn.preprocessing import StandardScaler  
sc = StandardScaler()  
x_train = sc.fit_transform(x_train)  
x_test = sc.transform(x_test)  

# Fitting Naive Bayes to the Training set  
from sklearn.naive_bayes import GaussianNB  
classifier = GaussianNB()  
classifier.fit(x_train, y_train)  

# Predicting the Test set results  
y_pred = classifier.predict(x_test)  
print(y_pred)

# Making the Confusion Matrix  
from sklearn.metrics import confusion_matrix  
cm = confusion_matrix(y_test, y_pred)  
print('Confusion Matrix\n',cm)

from sklearn.metrics import accuracy_score

sc1 = accuracy_score(y_test, y_pred)*100

print('The Accuracy   is  ',sc1)
# Visualising the Training set results  
from matplotlib.colors import ListedColormap  
x_set,y_set = x_train, y_train  
X1, X2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),  
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))  
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),  
             alpha = 0.75, cmap = ListedColormap(('purple', 'green')))  
plt.xlim(X1.min(), X1.max())  
plt.ylim(X2.min(), X2.max())  
for i, j in enumerate(np.unique(y_set)):  
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],  
                c = ListedColormap(('purple', 'green'))(i), label = j)  
plt.title('Naive Bayes (Training set)')  
plt.xlabel('Age')  
plt.ylabel('Estimated Salary')  
plt.legend()  
plt.show()  

# Visualising the Test set results  
from matplotlib.colors import ListedColormap  
x_set, y_set = x_test, y_test  
X1, X2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),  
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))  
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),  
             alpha = 0.75, cmap = ListedColormap(('purple', 'green')))  
plt.xlim(X1.min(), X1.max())  
plt.ylim(X2.min(), X2.max())  
for i, j in enumerate(np.unique(y_set)):  
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],  
                c = ListedColormap(('purple', 'green'))(i), label = j)  
plt.title('Naive Bayes (test set)')  
plt.xlabel('Age')  
plt.ylabel('Estimated Salary')  
plt.legend()  
plt.show()  

//Web fremwork-Create a Node.js file that writes an HTML form, with an upload field. 
// File.js 
	
  var http = require('http'); 
  http.createServer(function (req, res) 
  {   
    res.writeHead(200, {'Content-Type': 'text/html'});   
    res.write('<form action="fileupload" method="post" enctype="multipart/formdata">');   
    res.write('<input type="file" name="filetoupload"><br>');   
    res.write('<input type="submit">');   
    res.write('</form>');   
    return res.end(); 
  }).listen(8080); 
