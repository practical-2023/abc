//SADP-LowerCase

import java.io.*;
import java.util.*;
class LowerCaseInputStream extends FilterInputStream
{
  public LowerCaseInputStream (InputStream in)
  {
    super (in);
  }
  public int read () throws IOException
  {
    int c = super.read ();
     return (c == -1 ? c : Character.toLowerCase ((char) c));
  }
  public int read (byte[]b, int offset, int len) throws IOException
  {
    int result = super.read (b, offset, len);
    for (int i = offset; i < offset + result; i++)
      {
	b[i] = (byte) Character.toLowerCase ((char) b[i]);
      }
    return result;
  }
}

public class Main
{
  public static void main (String[]args) throws IOException
  {
    int c;
    try
    {
      InputStream in =
	new LowerCaseInputStream(
	    new BufferedInputStream (
	        new FileInputStream("test.txt")));
      while ((c = in.read ()) >= 0)
	{
	  System.out.print ((char) c);
	}
      in.close ();
    } catch (IOException e)
    {
      e.printStackTrace ();
    }
  }
}

// ML-ScatterPlot for Iris Dataset
from sklearn.datasets import load_iris
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
iris=load_iris()
print(iris)
print(iris.data[0:5,0:])
plt.scatter(iris.data[:,0],iris.data[:,1],c=iris.target)
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
ir=pd.DataFrame(iris.data)
ir.info()
ir.describe()

// WEB FREMEWORK- StudentReg
//StudReg.html


<!DOCTYPE html>
<html>
<head>
    <title style="color:blue;">Student Form</title>
</head>
<body>
    <div id="error"></div>
    <form id="form1" onsubmit="validation()">
        <table align="centre" border="3" cellspacing="10" style="color: blue; border-color: crimson;">
        <tr><td>Your First Name:</td><td><input type=" text" id="fname" name="fname"></td></tr><br>    
        <tr><td>Enter Last Name:</td><td><input type=" text" id="lname" name="lname"></td></tr><br>
        <tr><td>Enter Age:</td><td><input type=" text" id="age" name="age"></td></tr><br> 
        <tr><td>Enter Mobile:</td><td><input type=" text" id="mobile" name="mobile"></td></tr><br>
        <tr><td>Enter Address:</td><td><input type=" text" id="Address" name="address"></td></tr><br> 
        <tr><td>Select Subject</td><td><Select type=" text"name="select" value="-1">    
        <option> Select Subject</option>
        <option name="BSC">BSC</option>
        <option name="BSC">BSC(CS)</option>
        <option name="BSC">BSC(CA)</option></Select></td></tr>
        <tr><td style="text-align: center;">
        <input type="submit"value="Register"></td></tr>
        </table> 
        </form>
        <script src="validate.js" type="text/javascript"></script>     
</body>
</html>

//validate.js

function validation()
{ 
    const fname=document.getElementById("fname") 
    const lname=document.getElementById("lname") 
    const form = document.getElementById("form1") 
    const age = document.getElementById("age") 
    const error = document.getElementById("error") 
    const mobile = document.getElementById("mobile") 
    const address = document.getElementById("address") 
    const pattern = /^[A-Z a-z]+$/; 
    const mpatrn = /^([9]{1})-([0-9]{9})$/ 
    const addpatrn = /^[A-Z a-z 0-9]+$/ 
    if(!pattern.test(fname.value)) 
     {  
       alert("first  name should  contain alphabate only!!")     
       return false 
     }
    if(!pattern.test(lname.value)) 
    {   
       alert("Last name should contain alphabates only")     
       return false 
    }
    if(age.value <= 18 || age.value > 50) 
    { 
       alert("Age should be between 18 to 50 ")     
       return false 
    }
   if(mobile.value.length != 10) 
   { 
      alert("Mobile number should be of ten numbers")     
      return false     
   }
   if(!addpatrn.test(address.value)) 
   {     
      alert("Address does not contains special character")    
      return false 
   }
} 
