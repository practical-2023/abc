<<<<<<<               <<<Java>>>>         >>>>>>
import java.util.ArrayList; 
import java.util.List; 
class Subject 
{ 
 private List<Observer>observers=new ArrayList<Observer>(); 
 private int state; 
 public int getState() 
 { 
 return state; 
 } 
 public void setState(int s) 
 { 
 this.state=s; 
 notifyAllObservers(); 
 } 
 
 public void attach (Observer o1) 
 { 
 observers.add(o1); 
 } 
 public void notifyAllObservers() 
 { 
 for(Observer o1: observers) 
 { 
 o1.update(); 
 } 
 } 
} 
abstract class Observer 
{ 
protected Subject s1; 
public abstract void update(); 
} 
class BinaryObserver extends Observer 
 { 
 public BinaryObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Binary String:" +Integer.toBinaryString(s1.getState())); 
 } 
} 
class OctalObserver extends Observer 
 { 
 public OctalObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Octal String:" +Integer.toOctalString(s1.getState())); 
 } 
} 
class HexaObserver extends Observer 
 { 
 public HexaObserver(Subject s) 
 { 
 this.s1=s; 
 this.s1.attach(this); 
 } 
 public void update() 
 { 
 System.out.println("Heaxdeciamal String:" +Integer.toHexString(s1.getState())); 
 } 
} 
public class Main 
{ 
 public static void main(String [] args) 
 { 
 Subject s1=new Subject(); 
 new BinaryObserver(s1); 
 new OctalObserver(s1); 
 new HexaObserver(s1); 
 System.out.println("First state Change:15"); 
 s1.setState(15); 
 System.out.println("Second state Change:10"); 
 s1.setState(10); 
 } 
} 

<<<<<<<                < M    L >                  >>>>>
ML- Linear regression for predicting house price
# Implement Linear Regression for Predicting House Prices 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

ds=pd.read_csv('dataLR.csv')
print(ds)

x=ds.iloc[:,:-1].values
y=ds.iloc[:,1:].values
print(x)
print('\n',y)

from sklearn.model_selection import train_test_split
x_train,y_train,x_test,y_test=train_test_split(x,y,test_size=0.5,random_state=0)
print(x_train)
print(len(x_train))
print(x_test)
print(len(x_test))
print(y_train)
print(len(y_train))
print(y_test)
print(len(x_test))

from sklearn.linear_model import LinearRegression  
regressor= LinearRegression()  
regressor.fit(x_train,y_train)  

x_pred=regressor.predict(x_train)
y_pred=regressor.predict(x_test)

plt.scatter(x_train,y_train,c='blue')
plt.plot(x_train,x_pred,c='orange')
plt.title('House Prices')
plt.xlabel('Area of Houses')
plt.ylabel('prices(in Rupees)')
plt.show()

new_price=regressor.predict([[1500]])
print('New price of house predicted is::',new_price)

from sklearn.metrics import mean_squared_error
error=mean_squared_error(y_test,y_pred)
print('The house price of preicted and actual is::',error)

ds1=pd.read_csv('prdata.csv')
print(ds1)
regressor.predict(ds1)
p=regressor.predict(ds1)
ds1['prices']=p
ds1.to_csv('NewPredicted.csv')
print(ds1)





<<<<<<<<<<          WebFrameWork         >>>>>>>>>>

Main.js 
// Import events module 
var events = require('events'); 
 
// Create an eventEmitter object var eventEmitter = new events.EventEmitter(); 
 
// Create an event handler as follows var connectHandler = function connected() {    console.log('connection succesful.'); 
   
   // Fire the data_received event     eventEmitter.emit('data_received'); 
} 
 
// Bind the connection event with the handler eventEmitter.on('connection', connectHandler); 
  
// Bind the data_received event with the anonymous function eventEmitter.on('data_received', function() {    console.log('data received succesfully.'); 
}); 
 
// Fire the connection event  eventEmitter.emit('connection'); 
 console.log("Program Ended."); 
 
