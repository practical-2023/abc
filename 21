Write a Java Program to implement command pattern to test Remote Control 
interface Command { 
 public void execute(); 
} 
class Light { 
 public void on(){ 
 System.out.println("Light is on"); 
 } 
 public void off() 
 { 
 System.out.println("Light is off"); 
 } 
} 
 class LightOnCommand implements Command { 
 Light l1; 
 
 public LightOnCommand(Light a) { 
 this.l1 = a; 
 } 
 public void execute() { 
 l1.on(); 
 } 
 } 
 class LightOffCommand implements Command { 
Light l1; 
public LightOffCommand(Light a) { 
this.l1 = a; 
} 
public void execute() { 
l1.off(); 
} 
} 
 class SimpleRemoteControl { 
 Command slot; 
  public SimpleRemoteControl() {} 
 public void setCommand(Command command) { 
 slot = command; 
 } 
  public void buttonWasPressed() { 
 slot.execute(); 
 } 
 } 
public class Main { 
 public static void main(String[] args) { 
 SimpleRemoteControl r1 = new SimpleRemoteControl(); 
 Light l1 = new Light(); 
 
LightOnCommand lo = new LightOnCommand(l1); 
 r1.setCommand(lo); 
 r1.buttonWasPressed(); 
LightOffCommand lO = new LightOffCommand(l1); 
r1.setCommand(lO); 
r1.buttonWasPressed(); 
 } 
} 

-----------------------------------------------------------------
import numpy as np 
import matplotlib.pyplot as plt 
import pandas as pd

# Importing the dataset 
dataset = pd.read_csv('Position_Salaries.csv') 
x = dataset.iloc[:, 1:2].values 
y = dataset.iloc[:,2:].values

# Dataset is Non Linear 
plt.scatter(x,y,color ="pink")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()

from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.2, random_state=0)  


#feature Scaling  
from sklearn.preprocessing import StandardScaler    
sc = StandardScaler()  
sc.fit_transform(x_train)
    
x_train  = sc.transform(x_train)  
x_test  = sc.transform(x_test)
print(x_train)

from sklearn.svm import SVR 
regressor = SVR(kernel = 'rbf') 
regressor.fit(x_train, y_train)
scor = regressor.score(x_test, y_test)
print('The Accuracy   is ',scor)

# Predicting a new result 
y_pred = regressor.predict([[6.5]]) 
print(y_pred)

plt.scatter(x_train, y_train, color = 'orange') 
plt.plot(x_train, regressor.predict(x_train), color = 'aqua') 
plt.xlabel('Position level') 
plt.ylabel('Salary') 
plt.show()


# Visualising the Polynomial Regression results 
X_grid = np.arange(min(x_train), max(x_train), 0.01) 
X_grid = X_grid.reshape((len(X_grid), 1)) 
plt.scatter(x_train, y_train, color = 'blue') 
plt.plot(X_grid, regressor.predict(X_grid), color = 'green') 
plt.title('Truth or Bluff (Polynomial Regression)') 
plt.xlabel('Position level') 
plt.ylabel('Salary') 
plt.show()
-------------------------------------------------------------------------------------------
